#include <stdio.h>
#include "pico/stdlib.h"
#include "hardware/pwm.h"
#include "hardware/irq.h"

// Definicoes dos pinos para os LEDs RGB da placa BitDogLab
#define LED_RED   12  // Pino do LED vermelho
#define LED_BLUE  13  // Pino do LED azul

// Parametros do PWM
#define RED_PWM_FREQ 1000    // Frequencia de 1 kHz para o LED vermelho
#define BLUE_PWM_FREQ 10000  // Frequencia de 10 kHz para o LED azul
#define DUTY_STEP 5          // Passo de incremento do duty cycle (5%)
#define DUTY_MIN 5           // Duty cycle minimo (5%)
#define DUTY_MAX 100         // Duty cycle maximo (100%)

volatile uint16_t duty_cycle = DUTY_MIN; // Duty cycle inicial do LED vermelho

// Calcula o valor do contador para a frequencia desejada
uint16_t calculate_wrap(uint32_t freq) {
    return (uint16_t)(125000000 / (freq * 16)) - 1; // Baseado no clock de 125 MHz
}

// Interrupcao do timer para atualizar o duty cycle do LED vermelho
bool timer_callback(repeating_timer_t *rt) {
    static bool increasing = true; // Controle da direcao do duty cycle

    // Atualiza o duty cycle
    if (increasing) {
        duty_cycle += DUTY_STEP;
        if (duty_cycle >= DUTY_MAX) increasing = false;
    } else {
        duty_cycle = DUTY_MIN;
        increasing = true;
    }

    // Atualiza o PWM do LED vermelho
    uint slice = pwm_gpio_to_slice_num(LED_RED);
    uint16_t wrap = pwm_get_wrap(slice);
    pwm_set_gpio_level(LED_RED, (duty_cycle * (wrap + 1)) / 100);
    return true; // Continua o timer repetidamente
}

// Configura o PWM para um LED especifico
void setup_pwm(uint gpio, uint32_t freq, uint16_t duty) {
    gpio_set_function(gpio, GPIO_FUNC_PWM);               // Configura o pino para funcao PWM
    uint slice = pwm_gpio_to_slice_num(gpio);             // Obt√©m o slice do PWM associado ao pino
    uint16_t wrap = calculate_wrap(freq);                 // Calcula o valor do contador

    pwm_set_wrap(slice, wrap);                            // Configura o periodo do PWM
    pwm_set_clkdiv(slice, 16.0);                          // Define o divisor do clock
    pwm_set_gpio_level(gpio, (duty * (wrap + 1)) / 100);  // Define o duty cycle inicial
    pwm_set_enabled(slice, true);                         // Habilita o PWM no slice
}

int main() {
    stdio_init_all();

    // Configura o PWM para os LEDs vermelho e azul
    setup_pwm(LED_RED, RED_PWM_FREQ, duty_cycle);
    setup_pwm(LED_BLUE, BLUE_PWM_FREQ, 50); // LED azul com 50% de duty cycle inicial

    // Configura um timer repetitivo para atualizar o duty cycle do LED vermelho a cada 2 segundos
    repeating_timer_t timer;
    add_repeating_timer_ms(2000, timer_callback, NULL, &timer);

    // Loop principal (o controle do LED vermelho ocorre via interrupcao do timer)
    while (true) {
        tight_loop_contents(); // Mantem o microcontrolador em modo de espera
    }
}
